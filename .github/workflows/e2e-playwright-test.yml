name: Playwright Tests

# Controls when the workflow will run
on:
  pull_request:
    branches:
    - develop
    types:
    - closed

  #Triggers at 5 AM IST every day
  schedule:
  - cron: "30 23 * * *"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


jobs:
  test:
    runs-on: self-hosted
    container:
      image: ubuntu
    environment: Stage # Retrive secrets from 'Stage' environment
    env:
      BASE_URL: ${{ secrets.BASE_URL }}

      ADMIN_ID: ${{ secrets.ADMIN_ID }}
      ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
      ADMIN_PASS: ${{ secrets.ADMIN_PASS }}
      ADMIN_NAME: ${{ secrets.ADMIN_NAME }}

      REP_MAN_ID: ${{ secrets.REP_MAN_ID }}
      REP_MAN_EMAIL: ${{ secrets.REP_MAN_EMAIL }}
      REP_MAN_PASS: ${{ secrets.REP_MAN_PASS }}
      REP_MAN_NAME: ${{ secrets.REP_MAN_NAME }}

      EMP_ID: ${{ secrets.EMP_ID }}
      EMP_EMAIL: ${{ secrets.EMP_EMAIL }}
      EMP_PASS: ${{ secrets.EMP_PASS }}
      EMP_NAME: ${{ secrets.EMP_NAME }}

      EMP2_ID: ${{ secrets.EMP2_ID }}
      EMP2_EMAIL: ${{ secrets.EMP2_EMAIL }}
      EMP2_PASS: ${{ secrets.EMP2_PASS }}
      EMP2_NAME: ${{ secrets.EMP2_NAME }}

      # Hetzner Space (S3) credentials
      AWS_S3_BUCKET: ${{ secrets.HETZNER_S3_BUCKET }}
      AWS_ACCESS_KEY_ID: ${{ secrets.HETZNER_S3_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.HETZNER_S3_SECRET_ACCESS_KEY }}
      AWS_ENDPOINT_URL: ${{ secrets.HETZNER_S3_ENDPOINT_URL }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Sanitize branch name for cache key
      shell: bash
      run: |
        BRANCH_NAME="${GITHUB_REF#refs/heads/}"
        SAFE_BRANCH="${BRANCH_NAME//\//-}"
        echo "SANITIZED_REF=${SAFE_BRANCH}" >> $GITHUB_ENV

    - name: Restore Allure history for this branch
      uses: jakejarvis/s3-sync-action@v0.5.1
      with:
        args: >
          --endpoint-url=${{ env.AWS_ENDPOINT_URL }} --delete "allure-history/history/" "s3://${{ env.AWS_S3_BUCKET }}/${{ env.SANITIZED_REF }}/history/"

      env:
        AWS_ENDPOINT_URL: ${{ env.AWS_ENDPOINT_URL }}
        AWS_S3_BUCKET: ${{ env.AWS_S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}

    # Setup Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version-file: "frontend/.nvmrc"
        cache: "npm"
        cache-dependency-path: 'package-lock.json'

    # Install dependencies
    - name: Install dependencies
      run: |
        npm ci
        cd tests/e2e/
        npx playwright install
        npx playwright install-deps

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: "temurin"
        java-version: "17"

    - name: Run e2e Tests.
      run: |
        cd tests/e2e/
        npm run e2e:tests --

    - name: Restore previous Allure history into results
      if: always()
      run: |
        mkdir -p allure-results/history
        cp -R allure-history/history/* allure-results/history/ || echo "No previous history to restore"

    - name: Generate Allure (for count extraction)
      if: always()
      run: |
        cd tests/e2e
        # clean & generate for count-extraction
        npm run allure:report

    - name: Merge history into results
      if: always()
      run: |
        
        cp -R allure-report-for-count-extraction/history/* allure-results/history/

    - name: Generate single-file Allure HTML
      if: always()
      run: |
        cd tests/e2e
        npm run allure:htmlReport

    - name: Upload updated Allure history for this branch
      if: always()
      uses: jakejarvis/s3-sync-action@v0.5.1
      with:
        args: >
          --endpoint-url=${{ env.AWS_ENDPOINT_URL }} --delete "allure-results/history/" "s3://${{ env.AWS_S3_BUCKET }}/${{ env.SANITIZED_REF }}/history/"
      env:
        AWS_S3_BUCKET: ${{ env.AWS_S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
        AWS_ENDPOINT_URL: ${{ env.AWS_ENDPOINT_URL }}

    - name: Extract test results
      if: ${{ success() || failure() }}
      run: |
        # Install jq
        apt-get update && apt-get install -y jq

        # Path to the Allure summary file
        SUMMARY_FILE="allure-report-for-count-extraction/widgets/summary.json"

        # Check if the summary file exists
        if [ ! -f "$SUMMARY_FILE" ]; then
          echo "Error: Allure summary file not found at $SUMMARY_FILE"
          exit 1
        fi

        # Extract passed and failed test counts using jq
        PASSED_COUNT=$(jq '.statistic.passed' "$SUMMARY_FILE" || echo 0)
        FAILED_COUNT=$(jq '.statistic.failed' "$SUMMARY_FILE" || echo 0)
        BROKEN_COUNT=$(jq '.statistic.broken' "$SUMMARY_FILE" || echo 0)
        SKIPPED_COUNT=$(jq '.statistic.skipped' "$SUMMARY_FILE" || echo 0)
        UNKNOWN_COUNT=$(jq '.statistic.unknown' "$SUMMARY_FILE" || echo 0)
        TOTAL_COUNT=$(jq '.statistic.total' "$SUMMARY_FILE" || echo 0)

        # Output and export them as GitHub environment variables
        echo "Actual Count of Total Tests: $TOTAL_COUNT"

        # Optionally set them as output variables
        echo "passed_count=$PASSED_COUNT" >> $GITHUB_ENV
        echo "failed_count=$FAILED_COUNT" >> $GITHUB_ENV
        echo "broken_count=$BROKEN_COUNT" >> $GITHUB_ENV
        echo "skipped_count=$SKIPPED_COUNT" >> $GITHUB_ENV
        echo "unknown_count=$UNKNOWN_COUNT" >> $GITHUB_ENV
        echo "total_count=$TOTAL_COUNT" >> $GITHUB_ENV

        TOTAL=$((PASSED_COUNT + FAILED_COUNT + BROKEN_COUNT + SKIPPED_COUNT + UNKNOWN_COUNT))
        # Set environment variables
        echo "TOTAL=$TOTAL" >> $GITHUB_ENV

    - name: Display counts
      if: ${{ success() || failure() }}
      run: |
        echo "Actual Total Tests: ${{ env.total_count }}"
        echo "Passed Tests: ${{ env.passed_count }}"
        echo "Failed Tests: ${{ env.failed_count }}"
        echo "Broken Tests: ${{ env.broken_count }}"
        echo "Skipped Tests: ${{ env.skipped_count }}"
        echo "Unknown Tests: ${{ env.unknown_count }}"

    - name: Debug â€“ show saved history
      if: always()
      run: |
        echo "PWD: $(pwd)"
        echo "Root contents:"
        ls -1
        echo "Contents of allure-history/:"
        ls -R allure-history || echo "(not found or empty)"

    - name: Upload Allure Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: allure-report

    - name: Upload Playwright Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: tests/e2e/playwright-report

    - name: Zip Allure Report
      if: ${{ success() || failure() }}
      run: |
        apt-get update && apt-get install -y zip
        REPORT_DIR="allure-report"
        OUTPUT_ZIP="report.zip"

        if [ -d "$REPORT_DIR" ]; then
          echo "Zipping Allure report..."
          cd "$(dirname "$REPORT_DIR")"
          zip -r "$OUTPUT_ZIP" "$(basename "$REPORT_DIR")"
        else
          echo "Error - Allure Report not found in $REPORT_DIR"
          exit 1
        fi

    - name: Set the email body message for pull request merge or schedule message
      if: ${{ success() || failure() }}
      run: |
        if [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
          echo "message=<p>For the latest pull request merge titled <b><a href='${{ github.event.pull_request.html_url }}'> ${{ github.event.pull_request.title }}</a></b>, the E2E automation tests have been executed on the staging environment. Below is the summary:</p>" >> $GITHUB_ENV
        else
          echo "message=<p>This is to inform you that the scheduled E2E automation tests have been executed on the staging environment. Below is the summary::</p>" >> $GITHUB_ENV
        fi

    - name: Send Report via Email
      if: ${{ success() || failure() }}
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.QA_WORKFLOW_EMAIL }}
        password: ${{ secrets.QA_WORKFLOW_EMAIL_PASSWORD }}
        subject: Test Automation Report - Next PMS
        html_body: |
          <html>
            <head>
              <style>
                body {
                  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                  color: #333;
                  margin: 0;
                  padding: 0;
                  background-color: #f9f9f9;
                }
                .container {
                  width: 80%;
                  max-width: 600px;
                  margin: 20px auto;
                  background: #fff;
                  border: 1px solid #ddd;
                  border-radius: 8px;
                  padding: 20px;
                }
                .header {
                  text-align: center;
                  padding-bottom: 20px;
                  border-bottom: 1px solid #ddd;
                }
                .header h1 {
                  margin: 0;
                  color: #333;
                }
                .content {
                  margin-top: 20px;
                }
                .content p {
                  margin: 0 0 10px;
                }
                .content ul {
                  list-style: none;
                  padding: 0;
                }
                .content li {
                  padding: 8px 0;
                  border-bottom: 1px solid #eee;
                }
                .content li:last-child {
                  border-bottom: none;
                }
                .chart-container {
                  margin: 20px 0;
                  text-align: center;
                }
                .chart-title {
                  margin-bottom: 10px;
                  font-weight: bold;
                }
                .chart-container img {
                  max-width: 100%;
                  height: 240px;
                }
                .footer {
                  margin-top: 20px;
                  text-align: left;
                  font-size: 0.9em;
                  color: #777;
                }
                .footer p {
                  margin: 5px 0;
                }
                .footer a {
                  color: #007bff;
                  text-decoration: none;
                }
                .footer a:hover {
                  text-decoration: underline;
                }
                .content a {

                  text-decoration: none;
                }
                .content a:hover {
                  text-decoration: underline; /* Underline on hover */
                }
                 table {
                width: 100%;
                border-collapse: collapse;
                margin: 20px 0;
                background-color: #ffffff;
                border-radius: 5px;
                overflow: hidden;
                box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
              }
              th, td {
                border: 1px solid #dddddd;
                padding: 12px;
                text-align: left;
              }
              th {
                background-color: #4CAF50;
                color: white;
              }
              tr:nth-child(even) {
                background-color: #f2f2f2;
              }
              tr:hover {
                background-color: #ddd;
              }
              </style>
            </head>
            <body>
              <div class="container">
                <div class="header">
                  <h1>Test Automation Report</h1>
                </div>
                <div class="content">
                  <p>Hi Team,</p>
                  ${{ env.message }}
                  <p><b>Automation Test Summary:</b></p>
                  <ul>
                    <li><b>Total Tests:</b> ${{ env.TOTAL }}</li>
                    <li><b>Tests Passed:</b> ${{ env.passed_count }}</li>
                    <li><b>Tests Failed:</b> ${{ env.failed_count }}</li>
                    <li><b>Test Broken:</b> ${{env.broken_count }}</li>
                  </ul>
                </div>

            <p>The HTML test report is attached below for your reference.</p>
            <p>To view videos and other report assets to track failure, visit the <a href="https://github.com/rtcamp/next-pms/actions/runs/${{ github.run_id }}#artifacts">GitHub Actions Artifacts</a>.</p>
            <p>To view the build details and see what changes have been merged, visit the build link:</p><a href="https://github.com/rtcamp/next-pms/actions/runs/${{ github.run_id }}">Build Details</a>
            <p>If you have any questions, please feel free to revert back.</p>
                <div class="footer">
                  <p>Best regards,</p>
                  <p>QA Team</p>
                </div>
              </div>
            </body>
          </html>
        to: bots-erp-rtcamp-com-aaaajmbbbavnlkxccfuvoqjqsy@rtcamp.slack.com
        from: no-reply@gmail.com
        attachments: |
          report.zip

    - name: Cleanup
      if: ${{ always() }}
      uses: rtCamp/action-cleanup@master
